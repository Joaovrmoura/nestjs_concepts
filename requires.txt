 npm i @nestjs/mapped-types

npm i class-validator
npm i class-transformer

// no main.ts
 app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // Remove automaticamente propriedades que NÃO existem no DTO
      forbidNonWhitelisted: true, // Se o corpo da requisição contiver propriedades extras, lança um erro
    }),
  );


ParseIntPipe, ParseFloatPipe , ParseArrayPipe, ParseEnumPipe etc...
// delete a message
@Delete(':id')
    remove(@Param('id', ParseIntPipe) id: number) {
    console.log(id, typeof id);
    return this.messageService.remove(id);
}


// temos que ter cuidado e saber se o pipe dever ser
usado globalmente ou no decorator
exe: Todas as rotas usam o ParseIntPipe(todos os params devem ser int)
@Controller('users')
@UsePipes(ParseIntPipe)


////////////////////// aplicattion 

Funcionalidade	O que precisa	Tempo médio estimado (horas)
1. Configuração do ambiente	Instalar NestJS, MySQL, TypeORM, configurar .env, conexão banco	2h
2. Modelagem do banco	Criar entidades (User, Service, Appointment), relacionamentos	3h
3. Autenticação e autorização	JWT, registro/login, proteção de rotas, roles (admin/user)	4h
4. CRUD de usuários	Endpoints para criar, listar, editar, deletar usuários	3h
5. CRUD de serviços	Endpoints para gerenciar serviços oferecidos	3h
6. CRUD de agendamentos	Criar, listar, editar, cancelar agendamentos	4h
7. Validações	Validar dados com Pipes e class-validator	2h
8. Tratamento de erros	Middleware ou filters para erros globais	1.5h
9. Documentação API	Swagger para documentação das rotas	1.5h
10. Testes básicos	Testes unitários e integração (Jest)	4h
11. Implantação (deploy)	Docker, deploy no Railway/Render, configuração variáveis ambiente	3h
12. Extras opcionais	Filtros (data, usuário), paginação, envio de email